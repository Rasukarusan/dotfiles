snippet ! "template" b
package main

import "fmt"

func main() {
	fmt.Println("main")
}
endsnippet

snippet f "fmt.Println()" b
fmt.Println($1)
endsnippet

snippet er "if err != nil" b
if err != nil {
	$1
}
endsnippet

# 色付きで出力
snippet fmage "log.Printf('\x1b[35m%s\x1b[0m', 'hoge')" b
log.Printf("\x1b[35m%+v\x1b[0m", $1)
endsnippet

snippet fred "log.Printf('\x1b[31m%s\x1b[0m', 'hoge')" b
log.Printf("\x1b[31m%+v\x1b[0m", $1)
endsnippet

snippet fgreen "log.Printf('\x1b[32m%s\x1b[0m', 'hoge')" b
log.Printf("\x1b[32m%+v\x1b[0m", $1)
endsnippet

snippet fyellow "log.Printf('\x1b[33m%s\x1b[0m', 'hoge')" b
log.Printf("\x1b[33m%+v\x1b[0m", $1)
endsnippet

snippet scan "bufio.NewScanner(os.Stdin)" b
	s := bufio.NewScanner(os.Stdin)
	for s.Scan() {
		fmt.Println(s.Text())
	}
endsnippet

snippet filer "os.Open(file.txt)" b
	fp, err := os.Open("file.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer fp.Close()
	scanner := bufio.NewScanner(fp)
	for scanner.Scan() {
		fmt.Println(scanner.Text())
	}
endsnippet

snippet filew "os.Create(file.txt)" b
	file, err := os.Create("file.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	lines := []string{"hoge\n", "foo\n"}

	for _, line := range lines {
		_, err := file.WriteString(line)
		if err != nil {
			log.Fatal(err)
		}
	}
endsnippet

snippet sleep "time.Sleep(time.Second * 1)" b
	time.Sleep(time.Second * 1)
endsnippet

snippet headers "headersの中身全部表示" b
	for k, vals := range c.Request.Header {
		log.Printf("\x1b[31m：%s\x1b[0m", k)
		for _, v := range vals {
			log.Printf("\x1b[31m：%s\x1b[0m", v)
		}
	}
endsnippet


snippet test "テストファイル" b
package services

import (
	"errors"
	mock_repository "flier_api4/mock/repository"
	"flier_api4/models"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/google/go-cmp/cmp"
)

func $1TestAuthService_Refresh(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockUser := mock_repository.NewMockUser(ctrl)
	s := models.Session{
		UserID:       1,
		AccessToken:  "test_access_token",
		RefreshToken: "test_refresh_token",
	}
	mockSession := mock_repository.NewMockSession(ctrl)
	mockSession.EXPECT().GetByRefreshToken(s.RefreshToken).Return(s, nil)

	c := NewAuthService(mockUser, mockSession, logger, env)

	type args struct {
		refreshToken string
	}
	tests := []struct {
		name    string
		args    args
		want    *models.AuthRefreshResponse
		wantErr bool
	}{
		{
			name: "新たなアクセストークン、リフレッシュトークンが返ること",
			args: args{refreshToken: s.RefreshToken},
			want: &models.AuthRefreshResponse{
				Result:       true,
				AccessToken:  "test_access_token",
				RefreshToken: "test_refresh_token",
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := c.Refresh(tt.args.refreshToken)
			if (err != nil) != tt.wantErr {
				t.Errorf("AuthService.Refresh() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if d := cmp.Diff(got, tt.want); len(d) != 0 {
				t.Errorf("differs: (-got +want)\n%s", d)
			}
		})
	}
}
endsnippet

snippet dump "gin dump headers" b
	requestDump, err := httputil.DumpRequest(g.Request, true)
	if err != nil {
		log.Printf("\x1b[35m%v\x1b[0m", err)
	}
	log.Printf("\x1b[35m%v\x1b[0m", string(requestDump))
endsnippet
