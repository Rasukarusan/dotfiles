snippet ! "template" b
package main

import "fmt"

func main() {
	fmt.Println("main")
}
endsnippet

snippet f "fmt.Println()" b
fmt.Println($1)
endsnippet

snippet er "if err != nil" b
if err != nil {
	$1
}
endsnippet

# 色付きで出力
snippet fred "log.Printf('\x1b[31m%s\x1b[0m', 'hoge')" b
log.Printf("\x1b[31m%s\x1b[0m", $1)
endsnippet

snippet fgreen "log.Printf('\x1b[32m%s\x1b[0m', 'hoge')" b
log.Printf("\x1b[32m%s\x1b[0m", $1)
endsnippet

snippet fyellow "log.Printf('\x1b[33m%s\x1b[0m', 'hoge')" b
log.Printf("\x1b[33m%s\x1b[0m", $1)
endsnippet

snippet scan "bufio.NewScanner(os.Stdin)" b
	s := bufio.NewScanner(os.Stdin)
	for s.Scan() {
		fmt.Println(s.Text())
	}
endsnippet

snippet filer "os.Open(file.txt)" b
	fp, err := os.Open("file.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer fp.Close()
	scanner := bufio.NewScanner(fp)
	for scanner.Scan() {
		fmt.Println(scanner.Text())
	}
endsnippet

snippet filew "os.Create(file.txt)" b
	file, err := os.Create("file.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	lines := []string{"hoge\n", "foo\n"}

	for _, line := range lines {
		_, err := file.WriteString(line)
		if err != nil {
			log.Fatal(err)
		}
	}
endsnippet

snippet sleep "time.Sleep(time.Second * 1)" b
	time.Sleep(time.Second * 1)
endsnippet

snippet headers "headersの中身全部表示" b
	for k, vals := range c.Request.Header {
		log.Printf("\x1b[31m：%s\x1b[0m", k)
		for _, v := range vals {
			log.Printf("\x1b[31m：%s\x1b[0m", v)
		}
	}
endsnippet
